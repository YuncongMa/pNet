How to use the functional brain decomposition code

Dependency
	Several tools/packages are required for image I/O
	(for volume data, .nii or .nii.gz)
	1. add NIfTI package to path (included in ${pwd}/lib/NIfTI_20140122)
	(for surface data generated by Freesurfer, .mgh for functional data)
	2. add freesurfer/matlab package to path (included in ${pwd}/lib/freesurfer/matlab)
	(for surface data generated by HCP)
	3. add cifti and gifti-1.6 packages to path (included in ${pwd}/lib/cifti and gifti-1.6)
		* Workbench needs to be installed to read HCP data.
		
	if the data has been transformed into a matrix (# of time points x # of voxels), the above packages are not required.
	
	4. Ncut package is required for the robust initialization function (Ncut_9 included in ${pwd}/lib/Ncut_9).

	
Usage
	The whole pipeline includes 3 steps: initialization (group decomposition), robust initialization selection, and decomposition (collaborative individual decomposition). 
	(Examples scripts are provided in ${pwd}/scripts, s1 to s3 corresponds to step 1 to 3.)
	
1. initialization(group decomposition)
	a. for volume data:
		deployFuncInit_vol(sbjListFile,maskFile,prepDataFile,outDir,spaR,vxI,ard,iterNum,K,tNum,alpha,beta,resId)
		input: 
				sbjListFile		--	text file contains paths to the fMRI image files (.nii or .nii.gz), each line refers to one image
				maskFile		--  mask image, for example grey matter mask (.nii or .nii.gz)
				prepDataFile	--	auxiliary .mat file containing spatial neighborhood information, will be generated automatically using maskFile and saved for later use
				outDir			--	output directory
				spaR 			-- 	radius of spatial neighborhood (1 voxel by default)
				vxI				--	0 (spatial proximity only), 1 (image similarity and spatial proximity)
				ard				--	0/1 (without/with parsimonious regularization)
				iterNum			--	# of iteration (use value larger than 1000)
				K				-- 	# of ICNs
				tNum			--	# of time points of fMRI data
				alpha			--	spatial sparsity regularization parameter (try 1 first), larger value leads to more spatial sparse ICNs
				beta			--	spatial (graph) smoothness regularization parameter (try 10 first), larger value leads to more spatial smooth ICNs
				resId			--	prefix string of the output result files.
	
		output: ${outDir}/init.mat, file of initialization results, containing variable 'initU' and 'initV'(group ICNs).
	
	b. for surface data from Freesurfer (.mgh):
		deployFuncInit_surf_fs(sbjListFile,surfL,surfR,surfML,surfMR,prepDataFile,outDir,spaR,vxI,ard,iterNum,K,tNum,alpha,beta,resId)
		input:
				sbjListFile		--	text file contains paths to the fMRI image files (.mgh)
				surfL			--  surface file of left hemi-sphere (containing vertices and faces)
				surfR			-- 	surface file of right hemi-sphere
				surfML			--	surface label file of left hemi-sphere to exclude the vertices within the medial wall
				surfMR			--	surface label file of right hemi-sphere
				
				All the other parameters and output are the same as that in 1.a above.
	
	c. for surface data from HCP:
		deployFuncInit_surf_hcp(sbjListFile,wbPath,surfL,surfR,surfML,surfMR,prepDataFile,outDir,spaR,vxI,ard,iterNum,K,tNum,alpha,beta,resId)
		input:
				sbjListFile		--	text file contains paths to the fMRI image files from HCP
				wbPath			--  path to wb_command
				
				All the other parameters and output are the same as that in 1.b above.
	
	d. for preprocessed data by Matlab (.mat file):
		deployFuncInit_mat(sbjListFile,maskFile,prepDataFile,outDir,spaR,vxI,ard,iterNum,K,tNum,alpha,beta,resId)
		input:
				sbjListFile		--	text file contains paths to the fMRI image data files (.mat), reshaped as a matrix 'data' with size t x v (# of time points by # of voxels/vertices) 
				maskFile		--  .mat file containing a vector 'data' to keep regions of interests
				prepDataFile	--  the path to the .mat file containing spatial neighborhood information 'gNb', you need to generate it separately using ${pwd}/src/createPrepData.m, a example script is available in ${pwd}/scripts/s0_script_CreatePrepData.m
				
				All the other parameters and output are the same as that in 1.a above.

	* Multiple runs of initialization are recommended, using different subsets of subjects, to generate one robust initialization by step 2. (A script will be needed to get a robust initialization by running this step several times)

	
2. robust initialization selection
	selRobustInit(fileList,K,outDir)
	input:
			fileList 	-- paths of initialization results (.mat) generated by running step 1 several times
						  (each row for one initialization)
			K			-- # of ICNs
			outDir		-- where the best initialization is saved
	
	output:	${outDir}/init.mat

	
3. decomposition (collaborative individual decomposition)
	a. for volume data:
		deployFuncMvnmfL21p1_func_vol(sbjListFile,maskFile,prepDataFile,outDir,resId,initName,K,alphaS21,alphaL,vxI,spaR,ard,eta,iterNum,calcGrp,parforOn)
		input:		
				sbjListFile		--	text file contains paths to the fMRI image files (.nii or .nii.gz)
				maskFile		--  mask image, for example grey matter mask (.nii or .nii.gz)
				prepDataFile	--	auxiliary .mat file containing spatial neighborhood information, generated in step 1
				outDir			--	output directory
				resId			--	prefix string of the output result files.
				initName		--	initialization file (.mat) generated by step 1 or 2.
				K				-- 	# of ICNs
				alphaS21		--	spatial sparsity regularization parameter (try 1 first), larger value leads to more spatial sparse ICNs
				alphaL			--	spatial (graph) smoothness regularization parameter (try 10 first), larger value leads to more spatial smooth ICNs
				vxI				--	0 (spatial proximity only), 1 (image similarity and spatial proximity)
				spaR 			-- 	radius of spatial neighborhood (1 by default)
				ard				--	0/1 (without/with parsimonious regularization)
				eta				--	parsimonious regularization parameter when ard is set to 1 (use 1)
				iterNum			--	# of iteration (usually 30 would be enough)
				calcGrp			--  0/1 (do not / calculate group decomposition results for comparison use)
				parforOn		--	0/1 (do not / use parallel computation with parfor in Matlab, if enabled, 5 matlab pool workers will be used by default, you can change the number in ${pwd}/src/mMultiNMF_l21p1_ard_parfor.m, line 33).
		
		output: ${outDir}/final_UV.mat, ${outDir}/grp_UV.mat, ${outDir}/init_UV.mat, and ${outDir}/res_cen.mat
				decomposition results (.mat files), including 'final_UV.mat' (individual decomposition, 'U' timecourses, 'V' ICNs), 'grp_UV.mat' (group ICNs with corresponding individual timecourses), 'init_UV.mat' (initialization ICNs with corresponding individual timecourses), 'res_cen.mat' (group ICNs)

	b. for surface data from Freesurfer:
		deployFuncMvnmfL21p1_func_surf_fs(sbjListFile,medialWallFileL,medialWallFileR,prepDataFile,outDir,resId,initName,K,alphaS21,alphaL,vxI,spaR,ard,eta,iterNum,calcGrp,parforOn)
		input: 
				sbjListFile		--	text file contains paths to the fMRI image files (.mgh)
				medialWallFileL	--	surface label file of left hemi-sphere to exclude the vertices within the medial wall
				medialWallFileR	--	surface label file of right hemi-sphere
				
				All the other parameters and output are the same as that in 3.a above.
	
	c. for surface data from HCP:
		deployFuncMvnmfL21p1_func_surf_hcp(sbjListFile,wbPath,prepDataFile,outDir,resId,initName,K,alphaS21,alphaL,vxI,spaR,ard,eta,iterNum,calcGrp,parforOn)
		input:
				sbjListFile		--	text file contains paths to the fMRI image files from HCP
				wbPath			--  path to wb_command
				
				All the other parameters and output are the same as that in 3.a above.
		
	d. for preprocessed data by Matlab (in .mat):
		deployFuncMvnmfL21p1_func_mat(sbjListFile,maskFile,prepDataFile,outDir,resId,initName,K,alphaS21,alphaL,vxI,spaR,ard,eta,iterNum,calcGrp,parforOn)
		input:
				sbjListFile		--	text file contains paths to the fMRI image data files (.mat), reshaped as a matrix 'data' with size t x v (# of time points by # of voxels/vertices) 
				maskFile		--  .mat file containing a vector 'data' to keep regions of interests
				
				All the other parameters and output are the same as that in 3.a above.


4. convert decomposition results into .nii files (for volume data, example scripts available in ${pwd}/scripts/s4_script_SaveResImg_vol.m and s4_script_SaveResImgIdv_vol.m)
	a. func_saveVolRes2Nii(resFileName,maskName,outDir,saveFig,refNiiName)
		(convert group or initialization results)
		input:
			resFileName		-- path to the decomposition results .mat file
			maskName		-- brain mask
			outDir			-- where the .nii or .tif files will be saved
			(optional)
			saveFig			-- save .tif files if set to 1
			refNiiName		-- reference image onto which the icn would be overlayed
		output: ${outDir}/icn_xxx.nii
				${outDir}/cutoff_icn_xxx.tif (optional)
			
	b. func_saveVolRes2Nii_idv(resFileName,maskName,sbjId,outDir,saveFig,refNiiName)
		(convert individual results)
		input:
			resFileName		-- path to the decomposition results .mat file
			maskName		-- brain mask
			sbjId			-- results of which subject will be saved
			outDir			-- where the .nii or .tif files will be saved
			(optional)
			saveFig			-- save .tif files if set to 1
			refNiiName		-- reference image onto which the icn would be overlayed
			
		output: ${outDir}/icn_xxx.nii
				${outDir}/cutoff_icn_xxx.tif (optional)	

