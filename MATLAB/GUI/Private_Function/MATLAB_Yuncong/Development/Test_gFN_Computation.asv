% Yuncong Ma, 8/16/2023
% This script is to test the corresponding python file, in order to ensure
% the same result of gFN computation
% Test_gFN_Computation.py

%% Add to path
addpath(genpath('/Users/yuncongma/Documents/Document/fMRI/Myworks/pNet'));
%%
maxNumCompThreads(10);
tic
% load file
Data = fLoad_MATLAB_Single_Variable('/Users/yuncongma/Documents/Document/fMRI/Myworks/pNet/Example/HCP_Surface/Data/100206/1/LR/Image.mat');
gNb = fLoad_MATLAB_Single_Variable('/Users/yuncongma/Documents/Document/fMRI/Myworks/pNet/Example/HCP_Surface/Test_FN17/FN_Computation/gNb.mat');
Setting = fLoad_MATLAB_Single_Variable('/Users/yuncongma/Documents/Document/fMRI/Myworks/pNet/Example/HCP_Surface/Test_FN17/FN_Computation/Setting.mat');

Data=Data';


% parameter
K = 17;
maxIter = 1000;
minIter = 30;
meanFitRatio = 0.1;
error = 1e-4;
nRepeat = 1;
rounds = 30;
normW = 1;
eta = 0;
Alpha = 2;
Beta = 30;
alphaS = 0;
alphaL = 0;
vxI = 0;
spar = 1;
initConv = 1;
ard = 0;
dataPrecision = 'double';
logFile = 'Log_pFN_NMF_MATLAB.log';

% setup log file
% fileID = fopen(logFile, 'w');
fprintf(['\nStart NMF for gFN using MATLAB at ',char(datetime),'\n'])


% [mat_float,mat_eps] = set_data_precision(dataPrecision);
mat_eps = eps(dataPrecision);
if strcmp(dataPrecision,'single')
    Data=single(Data);
else
    Data=double(Data);
end

dim_space = size(Data,2);
dim_time = size(Data,1);

nmVec = zeros(length(gNb),1);
for gni=1:length(gNb)
    nmVec(gni) = length(gNb{gni});
end
nM = median(nmVec);

pS = round((alpha*dim_time)/K);
pL = round((beta*dim_time)/(K*nM));

% normalize data
X = normalize_data(scan','vp','vmax');

% construct the spatial affinity graph
[L,W,D] = construct_Laplacian_gNb(gNb, dim_space, alphaL, normW, dataPrecision);

% Initialize U and V
mean_X = sum(X(:))/(dim_time*dim_space);
U = (rand(dim_time,k)+1)*(sqrt(mean_X/K));
V = (rand(dim_space,k)+1)*(sqrt(mean_X/K));

[U,V] = normalize_u_v(U, V, 1, 1);


if ard>0
    ard = 1;
    eta = 0.1;
    lambdas = sum(U,1) / dim_time;
    hyperLam = eta * sum(sum(X.^2,1),2) / (dim_time*dim_space*2);
else
    lambdas=0;
    hyperLam=0;
end

oldLogL=inf;
oldU=U;
oldV=V;

for i=1:maxIter

    % ===================== update V ========================
    XU = X'*U;  % mnk or pk (p<<mn)
    UU = U'*U;  % mk^2
    VUU = V*UU; % nk^2

    if alphaS>0
        %             % L1 sparsity
        %             F = ones(size(V));
        %             VUU = VUU + 0.5*alphaS * F;

        % scale-invariant sparsity
        tmpNorm2 = sqrt(sum(V.^2,1));
        posTerm = 1 ./ max(repmat(tmpNorm2,dim_space,1),mat_eps);
        tmpNorm1 = sum(V,1);
        negTerm = V .* repmat(tmpNorm1,dim_space,1) ./ max(repmat(tmpNorm2.^3,dim_space,1),mat_eps);

        XU = XU + 0.5*alphaS * negTerm;
        VUU = VUU + 0.5*alphaS * posTerm;
    end

    if alphaL>0
        V = double(V);
        WV = W*V;
        DV = D*V;

        XU = XU + WV;
        VUU = VUU + DV;
    end

    V = V.*(XU./max(VUU,mat_eps));

    prunInd = sum(V~=0)==1;
    if any(prunInd)
        V(:,prunInd) = zeros(dim_space,sum(prunInd));
        U(:,prunInd) = zeros(dim_time,sum(prunInd));
    end

    [U, V] = normalize_u_v(U, V, NormV, Norm);

    % ===================== update U ========================
    XV = X*V;   % mnk or pk (p<<mn)
    VV = V'*V;  % nk^2
    UVV = U*VV; % mk^2

    if ard>0
        posTerm = 1./max(repmat(lambdas,dim_time,1),mat_eps);
        UVV = UVV + posTerm*hyperLam;
    end

    U = U.*(XV./max(UVV,eps));

    prunInd = sum(U)==0;
    if any(prunInd)
        V(:,prunInd) = zeros(dim_space,sum(prunInd));
        U(:,prunInd) = zeros(dim_time,sum(prunInd));
    end

    if ard>0
        lambdas = sum(U) / dim_time;
    end

    % Calculate objective function
    if ~exist('deltaVU','var')
        
    end
    if ~exist('dVordU','var')
        dVordU = 1;
    end
    dV = [];
    maxM = 62500000;
    [mFea, nSmp] = size(X);
    mn = numel(X);
    nBlock = floor(mn*3/maxM);

    if mn < maxM
        dX = U*V'-X;
        obj_NMF = sum(sum(dX.^2));
        if deltaVU
            if dVordU
                dV = dX'*U;
            else
                dV = dX*V;
            end
        end
    else
        obj_NMF = 0;
        if deltaVU
            if dVordU
                dV = zeros(size(V));
            else
                dV = zeros(size(U));
            end
        end
        for i = 1:ceil(nSmp/nBlock)
            if i == ceil(nSmp/nBlock)
                smpIdx = (i-1)*nBlock+1:nSmp;
            else
                smpIdx = (i-1)*nBlock+1:i*nBlock;
            end
            dX = U*V(smpIdx,:)'-X(:,smpIdx);
            obj_NMF = obj_NMF + sum(sum(dX.^2));
            if deltaVU
                if dVordU
                    dV(smpIdx,:) = dX'*U;
                else
                    dV = dU+dX*V(smpIdx,:);
                end
            end
        end
        if deltaVU
            if dVordU
                dV = dV ;
            end
        end
    end
    if isempty(L)
        obj_Lap = 0;
    else
        V = double(V);
        obj_Lap = sum(sum((L*V).*V));
    end

    %obj_Spa = alphaS * sum(sum(V));
    tmpNorm1 = sum(V,1);
    tmpNorm2 = sqrt(sum(V.^2,1)) + eps;
    obj_Spa = alphaS * sum(tmpNorm1./tmpNorm2);

    if ard>0
        su = sum(U);
        su(su==0) = 1;
        obj_ard = sum(log(su))*mFea*hyperLam;
    else
        obj_ard = 0;
    end

    obj = obj_NMF + obj_Lap + obj_Spa;
    objStr = ['    totObj:',num2str(obj),',NMF:',num2str(obj_NMF),',Lap:',num2str(obj_Lap),',Spa:',num2str(obj_Spa),',Ard:',num2str(obj_ard)];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% old code
tmp_T = cputime;
tryNo = tryNo+1;
nIter = 0;
maxErr = 1;
nStepTrial = 0;
while(maxErr > differror)
    % ===================== update V ========================
    XU = X'*U;  % mnk or pk (p<<mn)
    UU = U'*U;  % mk^2
    VUU = V*UU; % nk^2

    if alphaS>0
        %             % L1 sparsity
        %             F = ones(size(V));
        %             VUU = VUU + 0.5*alphaS * F;

        % scale-invariant sparsity
        tmpNorm2 = sqrt(sum(V.^2,1));
        posTerm = 1 ./ max(repmat(tmpNorm2,dim_space,1),eps);
        tmpNorm1 = sum(V,1);
        negTerm = V .* repmat(tmpNorm1,dim_space,1) ./ max(repmat(tmpNorm2.^3,dim_space,1),eps);

        XU = XU + 0.5*alphaS * negTerm;
        VUU = VUU + 0.5*alphaS * posTerm;
    end
    if alphaL>0
        V = double(V);
        WV = W*V;
        DV = D*V;

        XU = XU + WV;
        VUU = VUU + DV;
    end

    V = V.*(XU./max(VUU,eps));

    prunInd = sum(V~=0)==1;
    if any(prunInd)
        V(:,prunInd) = zeros(dim_space,sum(prunInd));
        U(:,prunInd) = zeros(dim_time,sum(prunInd));
    end

    [U, V] = normalize_u_v(U, V, NormV, Norm);

    % ===================== update U ========================
    XV = X*V;   % mnk or pk (p<<mn)
    VV = V'*V;  % nk^2
    UVV = U*VV; % mk^2

    if isfield(options,'ard') && options.ard==1
        posTerm = 1./max(repmat(lambdas,dim_time,1),eps);
        UVV = UVV + posTerm*hyperLam;
    end

    U = U.*(XV./max(UVV,eps));

    prunInd = sum(U)==0;
    if any(prunInd)
        V(:,prunInd) = zeros(dim_space,sum(prunInd));
        U(:,prunInd) = zeros(dim_time,sum(prunInd));
    end

    if isfield(options,'ard') && options.ard==1
        lambdas = sum(U) / dim_time;
    end

    nIter = nIter + 1;
    %disp(['   iteration:',num2str(nIter)]);
    if nIter > minIter
        if selectInit
            objhistory = CalculateObj(X, U, V, L, alphaS, ard, hyperLam);
            maxErr = 0;
        else
            if isempty(maxIter)
                newobj = CalculateObj(X, U, V, L, alphaS, ard, hyperLam);
                objhistory = [objhistory newobj];
                meanFit = meanFitRatio*meanFit + (1-meanFitRatio)*newobj;
                maxErr = (meanFit-newobj)/meanFit;
            else
                if isfield(options,'Converge') && options.Converge
                    [newobj, newObjStr] = CalculateObj(X, U, V, L, alphaS, ard, hyperLam);
                    objhistory = [objhistory newobj];
                    if mod(nIter,10)==0
                        fprintf(FID,['\n  iter ',num2str(nIter), ' in ',num2str(maxIter),'\n']);
                        fprintf(FID,[newObjStr,'\n\n']);
                    end

                    %meanFit = meanFitRatio*meanFit + (1-meanFitRatio)*newobj;
                    %maxErr = (meanFit-newobj)/meanFit;
                    maxErr = abs(objhistory(end)-objhistory(end-1))/objhistory(end);
                else
                    maxErr = 1;
                end

                if nIter >= maxIter
                    maxErr = 0;
                    if isfield(options,'Converge') && options.Converge
                    else
                        objhistory = 0;
                    end
                end
            end
        end
    end
end

if tryNo == 1
    U_final = U;
    V_final = V;
    nIter_final = nIter;
    elapse_final = elapse;
    objhistory_final = objhistory;
    bSuccess.nStepTrial = nStepTrial;
else
    if objhistory(end) < objhistory_final(end)
        U_final = U;
        V_final = V;
        nIter_final = nIter;
        objhistory_final = objhistory;
        bSuccess.nStepTrial = nStepTrial;
        if selectInit
            elapse_final = elapse;
        else
            elapse_final = elapse_final+elapse;
        end
    end
end

if selectInit
    if tryNo < nRepeat
        %re-start
        if isempty(U_)
            U = abs(rand(dim_time,k));
            norms = sqrt(sum(U.^2,1));
            norms = max(norms,eps);
            U = U./repmat(norms,dim_time,1);
            if isempty(V_)
                V = abs(rand(dim_space,k));
                V = V/sum(sum(V));
            else
                V = V_;
            end
        else
            U = U_;
            if isempty(V_)
                V = abs(rand(dim_space,k));
                V = V/sum(sum(V));
            else
                V = V_;
            end
        end

        [U,V] = NormalizeUV(U, V, NormV, Norm);
    else
        tryNo = tryNo - 1;
        minIter = 0;
        selectInit = 0;
        U = U_final;
        V = V_final;
        objhistory = objhistory_final;
        meanFit = objhistory*10;
    end
end

toc
